<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"  
    xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"  
    xmlns:jpa="http://www.springframework.org/schema/data/jpa" 
    xmlns:websocket="http://www.springframework.org/schema/websocket"
    xmlns:security="http://www.springframework.org/schema/security" 
    xmlns:jaxws="http://cxf.apache.org/jaxws" 
    xsi:schemaLocation="  
        http://www.springframework.org/schema/aop   
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
        http://www.springframework.org/schema/security   
        http://www.springframework.org/schema/security/spring-security-3.2.xsd  
        http://www.springframework.org/schema/beans   
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
        http://www.springframework.org/schema/data/jpa   
        http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd  
        http://www.springframework.org/schema/tx   
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd  
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd
        http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd">  
    <!-- 
    	<import resource="classpath:META-INF/cxf/cxf.xml" />
	<import resource="classpath:META-INF/cxf/cxf-extension-soap.xml" />
	<import resource="classpath:META-INF/cxf/cxf-servlet.xml" />
	
	<jaxws:endpoint id="greetingService"
		implementor="com.cn.ctbri.webservice.impl.GreetingServiceImpl" 
		address="/GreetingService" />
     -->
     
    <!-- 数据库配置文件位置 -->  
    <context:property-placeholder location="classpath:/jdbc.properties" />
    
    <context:component-scan base-package="com.cn.ctbri" />
    
    <bean id="taskService" class="com.cn.ctbri.service.impl.TaskServiceImpl" />
    <!-- <bean id="orderService" class="com.cn.ctbri.service.impl.OrderServiceImpl" /> -->
    <bean id="alarmService" class="com.cn.ctbri.service.impl.AlarmServiceImpl" />
    <bean id="engineService" class="com.cn.ctbri.service.impl.EngineServiceImpl" />
    <!-- <bean id="assetService" class="com.cn.ctbri.service.impl.AssetServiceImpl" /> -->
    
    <!-- 配置dbcp数据源 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}" />
		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		<property name="maxWait" value="${jdbc.maxWait}" />
	</bean>  
  
    <!-- 使用JDBC事物 -->  
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>  
	<!-- 使用annotation注解方式配置事务   -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
  	
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <property name="configLocation" value="classpath:sqlMapConfig.xml"></property> 
    </bean>  
    
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">  
        <constructor-arg index="0" ref="sqlSessionFactory" />  
    </bean>

	<!-- JMS -->
    <!--真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供  -->     
	<bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">  
	    <property name="brokerURL" value="tcp://localhost:61616"/>  
	</bean>
	 <!--Spring用于管理真正的ConnectionFactory的ConnectionFactory  -->      
	<bean id="connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">  
	     <!--目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->    
	    <property name="targetConnectionFactory" ref="targetConnectionFactory"/>  
	</bean> 
	<!--这个是队列目的地，点对点的   -->    
	<bean id="taskQueueDestination" class="org.apache.activemq.command.ActiveMQQueue">  
	    <constructor-arg>  
	        <value>TASKQUEUE</value>  
	    </constructor-arg>  
	</bean>
	<bean id="resultQueueDestination" class="org.apache.activemq.command.ActiveMQQueue">  
	    <constructor-arg>  
	        <value>RESULTQUEUE</value>  
	    </constructor-arg>  
	</bean>
	
	<!-- <bean id="optQueueDestination" class="org.apache.activemq.command.ActiveMQQueue">  
	    <constructor-arg>  
	        <value>OPTQUEUE</value>  
	    </constructor-arg>  
	</bean> -->
	<!-- 消息监听器    -->    
	<bean id="taskConsumerListener" class="com.cn.ctbri.jms.TaskConsumerListener"/>
    <bean id="resultConsumerListener" class="com.cn.ctbri.jms.ResultConsumerListener"/>
    <!-- <bean id="optConsumerListener" class="com.cn.ctbri.jms.OptConsumerListener"/>  -->
	<!--这个是主题目的地，一对多的   --><!--    
	<bean id="topicDestination" class="org.apache.activemq.command.ActiveMQTopic">  
	    <constructor-arg value="topic"/>  
	</bean>
	
	
	--><!-- 消息监听容器    -->    
	<bean id="jmsTaskContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">  
	    <property name="connectionFactory" ref="connectionFactory" />  
	    <property name="destination" ref="taskQueueDestination" />  
	    <property name="messageListener" ref="taskConsumerListener" />  
	</bean>
	<bean id="jmsResultContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">  
	    <property name="connectionFactory" ref="connectionFactory" />  
	    <property name="destination" ref="resultQueueDestination" />  
	    <property name="messageListener" ref="resultConsumerListener" />  
	</bean>
	
	<!-- <bean id="jmsOptContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">  
	    <property name="connectionFactory" ref="connectionFactory" />  
	    <property name="destination" ref="optQueueDestination" />  
	    <property name="messageListener" ref="optConsumerListener" />  
	</bean> -->
	 <!--Spring提供的JMS工具类，它可以进行消息发送、接收等 --> 
	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">  
	     <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->    
	    <property name="connectionFactory" ref="connectionFactory"/>  
	</bean>   
	
	
	<!-- Timer schedule -->
    <!--要调度的对象，任务下发-->
    <bean id="taskJobBean" class="com.cn.ctbri.common.Scheduler4Task" />
    <bean id="taskJobDetail"
    	class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
    	<property name="targetObject" ref="taskJobBean" />
    	<property name="targetMethod" value="execute" />
    	<property name="concurrent" value="false" />
    </bean>
    <bean id="taskTrigger"
    	class="org.springframework.scheduling.quartz.CronTriggerBean">
    	<property name="jobDetail" ref="taskJobDetail" />
    	<property name="cronExpression" value="0 0/1 * * * ?" />
    	<!-- <property name="cronExpression" value="0 58 09 * * ? *" /> -->
    	 
    </bean>
    
    
    <!--要调度的对象，任务删除-->
    <bean id="taskDelJobBean" class="com.cn.ctbri.common.SchedulerDelTask" />
    <bean id="taskDelJobDetail"
    	class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
    	<property name="targetObject" ref="taskDelJobBean" />
    	<property name="targetMethod" value="execute" />
    	<property name="concurrent" value="false" />
    </bean>
    <bean id="delTrigger"
    	class="org.springframework.scheduling.quartz.CronTriggerBean">
    	<property name="jobDetail" ref="taskDelJobDetail" />
    	<property name="cronExpression" value="0 0/5 * * * ?" />
    	<!--<property name="cronExpression" value="0 46 20 * * ? *" /> -->
    </bean>
    
    <!-- Timer schedule -->
    <!--要调度的对象，任务下发-->
    <bean id="expJobBean" class="com.cn.ctbri.common.SchedulerExp" />
    <bean id="expJobDetail"
    	class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
    	<property name="targetObject" ref="expJobBean" />
    	<property name="targetMethod" value="execute" />
    	<property name="concurrent" value="false" />
    </bean>
    <bean id="expTrigger"
    	class="org.springframework.scheduling.quartz.CronTriggerBean">
    	<property name="jobDetail" ref="expJobDetail" />
    	<property name="cronExpression" value="0 0/6 * * * ?" /> 
    	<!-- <property name="cronExpression" value="0 21 17 * * ? *" />-->
    	 
    </bean>
    
    <!-- Timer schedule -->
    <!--要调度的对象，设备信息-->
    <bean id="engineJobBean" class="com.cn.ctbri.common.SchedulerEngine" />
    <bean id="engineJobDetail"
    	class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
    	<property name="targetObject" ref="engineJobBean" />
    	<property name="targetMethod" value="execute" />
    	<property name="concurrent" value="false" />
    </bean>
    <bean id="engineTrigger"
    	class="org.springframework.scheduling.quartz.CronTriggerBean">
    	<property name="jobDetail" ref="engineJobDetail" />
    	<!-- <property name="cronExpression" value="0 0/2 * * * ?" /> -->
    	<property name="cronExpression" value="0 00 11 * * ? *" />
    	 
    </bean>
    
    <!-- 将lazy-init='false'那么容器启动就会执行调度程序   -->
    <bean id="startQuertz"
    	class="org.springframework.scheduling.quartz.SchedulerFactoryBean"
    	lazy-init="false">
    	<property name="triggers">
    		<list>
    			<ref bean="taskTrigger" />
    			<ref bean="expTrigger" /> 
    			<ref bean="delTrigger" />
    			<ref bean="engineTrigger" />
    		</list>
    	</property>
    </bean>
</beans>  